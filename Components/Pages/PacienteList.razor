@page "/pacientes"
@inject PacienteService PacienteService
@using ProyectoFinal.Models
@using ProyectoFinal.Services

<h3>Lista de Pacientes</h3>

<div style="margin-bottom: 10px;">
    <label for="buscarCedula">Buscar por Cedula:</label>
    <input id="buscarCedula" type="text" @bind="cedulaBuscar" />
    <button @onclick="BuscarPaciente" class="button-like">Buscar</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Cédula</th>
            <th>Nombre</th>
            <th>Apellido 1</th>
            <th>Apellido 2</th>
            <th>Agudeza Visual</th>
            <th>Refracción</th>
            <th>Salud Ocular</th>
           
        </tr>
    </thead>
    <tbody>
        @foreach (var paciente in pacientesFiltrados)
        {
            <tr>
                <td>@paciente.cedula</td>
                <td>@paciente.nombre</td>
                <td>@paciente.apellido1</td>
                <td>@paciente.apellido2</td>
                <td>@paciente.ResultadoAgudezaVisual</td>
                <td>@paciente.ResultadoRefraccion</td>
                <td>@paciente.ResultadoSaludOcular</td>
                <td>
                    <a href="/edit-paciente/@paciente.Id" class="button-like">Editar</a>
                    <button @onclick="() => DeletePaciente(paciente.Id)" class="button-like">Borrar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (pacientesFiltrados != null && !pacientesFiltrados.Any())
{
    <p>No se encontraron Pacientes con la Cédula "@cedulaBuscar".</p>
}

@code {
    private List<Paciente> pacientes;
    private List<Paciente> pacientesFiltrados;
    private string cedulaBuscar;

    protected override void OnInitialized()
    {
        pacientes = PacienteService.GetPaciente();
        pacientesFiltrados = new List<Paciente>(pacientes);
    }

    private void DeletePaciente(int id)
    {
        PacienteService.DeleteVehiculo(id);
        ActualizarLista();
    }

    private void BuscarPaciente()
    {
        if (!string.IsNullOrWhiteSpace(cedulaBuscar))
        {
            pacientesFiltrados = pacientes.Where(v => v.cedula.Equals(cedulaBuscar, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            pacientesFiltrados = new List<Paciente>(pacientes);
        }
    }

    private void ActualizarLista()
    {
        pacientes = PacienteService.GetPaciente();
        BuscarPaciente(); // Actualizar la lista filtrada después de eliminar
    }
}

<style>
    .button-like {
        padding: 10px 15px;
        font-size: 16px;
        color: white;
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        cursor: pointer;
        margin-left: 10px; /* Ajusta el margen entre los elementos */
    }

        .button-like:hover {
            background-color: #0056b3;
        }

        .button-like:focus {
            outline: none;
        }
</style>